Оператор выбора
Оператор выбора switch используется для множественного выбора из заранее известного набора значений.

пример простейшей программы
#include <iostream>
int main(){
std::cout << "Hello, world!" << std::endl;
}

базовые типы данных
К базовым типам данных языка С++ относят:
1) целочисленные;
2) вещественные;
3) логический;
4) символьный;
5) пустой тип.
С каждым типом данных связан свой диапазон значений (количество байт под одно значение) и допустимые операции.
См. также составные типы данных.

правильно выбрать тип данных
Тип данных выбирают исходя из диапазона допустимых значений.

int
Тип int предназначен для хранения целых чисел, занимает 2 или 4 байта(в зависимости от разряднсти). 
Диапазон значений: -2^15...2^15-1 для 2-х байт и -2^31...2^31-1 для 4-х байт.

float
Тип float - вещественный тип для хранения чисел с плавающей точкой, одинарной точности. Занимает 4 байта. Диапазон значений: ...

double
Тип double - вещественный тип для хранения чисел с плавающей точкой, двойной точности. Занимает 8 байт. Диапазон значений: ...

bool
Тип bool - логический тип для хранения значений true (истина) и false (ложь). Занимает 1 байт.

char
Тип char - символьный тип. Занимает 1 байт. Диапазон значений: -2^7...2^7-1.
Тип данных char является целочисленным типом, т.е. базовое значение хранится как целое число, которое интерпретируется как символ ASCII.

ascii
ASCII расшифровывается как American Standard Code for Information Interchange (Американский стандартный код для обмена информацией) и определяет конкретный способ представления английских символов (плюс несколько других символов) в виде чисел от 0 до 127 (называемых кодом ASCII или кодовым обозначением). Например, код ASCII 98 интерпретируется как символ 'b'.

void
Тип void - пустой тип, отсутствие типа. Занимает 2 или 4 байта. Нельзя определить переменную с типом void.
void обычно используется в нескольких разных контекстах:
1) указать, что функция не возвращает значение;
2) указать, что функция не принимает никаких параметров (устарело);
3) создать безтиповый указатель.

составные типы данных
К составным (производным) типам данных языка С++ относят:
1) базовые типы со спецификаторами;
2) массивы;
3) указатели и ссылки;
4) структуры, объединения и классы;
5) перечисления.

спецификаторы типов
В C++ определены четыре спецификатора типов данных:
1) short - короткий; 
2) long - длинный; 
3) signed - знаковый; 
4) unsigned - беззнаковый.

short
Спецификатор short (короткий) применяется к типу int. 
Значение типа short int занимает 2 байта.
Типы short, short int, signed short и signed short int являются синонимами.

long
Спецификатор long (длинный) применяется к типам int, long int и double. 
Значение типа long int занимает 4 байта.
Типы long, long int, signed long и signed long int являются синонимами.
Значение типа long double занимает 8, 10 или 16 байт. 
В некоторых реализациях компилятора типы double и long double являются синонимами.
Значение типа long long занимает 8 байт.
Типы long long, long long int, signed long long и signed long long int являются синонимами.

signed
Спецификатор signed (знаковый, т.е. возможность использования отрицательных значений) применяется к типам int и char. 
Размер в байтах не меняется.
Типы int, signed и signed int являются синонимами.
Типы char и signed char являются синонимами.

unsigned
Спецификатор unsigned (беззнаковый) применяется к типам char, int и модификациям int. Диапазон значений начинается с 0.
Размер в байтах не меняется.
Типы unsigned и usigned int являются синонимами.

Диапазон unsigned char
0...2^8-1

Диапазон signed char
-2^7...2^7-1

Диапазон unsigned short int
0...2^16-1

Диапазон signed short int
-2:^15...2^15-1

Диапазон unsigned long int
0...2^32-1

Диапазон signed long int
-2^31...2^31-1

Диапазон unsigned long long int
0...2^64-1

Диапазон signed long long
-2^63...2^63-1

Диапазон long double
Диапазон long double - ответ

Диапазон double
Диапазон double - ответ

Диапазон float
Диапазон float - ответ

символьный литерал
Символьные литералы всегда помещаются в одинарные кавычки (например, 'g', '1', ' ')

логический литерал
Это значения true и false

переменная
Переменная - это именованный объект в памяти, принадлежащий определенному типу данных. Значение можно менять в ходе работы программы.
Для использования переменной, ее надо объявить и определить.

объявление
Объявление - инструкция, приписывающая объекту определенное имя

определение
Определение - объявление с выделением памяти

инициализация
Определение объекта с заданием определенного значения

определить переменную
Для определения переменной необходимо описать ее тип и через пробел имя переменной. Например:
int x;
определяет переменную x типа int.

задать имя переменной правила
При создании имени переменной (идентификатора) допустимо использовать только буквы, цифры и знак нижнего почеркивания, причем имя не должно начинаться с цифры.

if
Оператор if используется для записи условия. 

пример if
Вычисление модуля числа x.
if(x < 0)
   x = -x;

Оператор выбора
Оператор выбора switch используется для множественного выбора из заранее известного набора значений.

правила switch
В селекторе и метках switch допустимо использовать порядковые типы: целочисленный, символьный, логический, перечисляемый.

пример switch
В данном примере...
char color;
cin >> color;
switch(){
   case 'r' : cout << "stop\n"; break;
   case 'y' : cout << "wait\n"; break;
   case 'g' : cout << "go\n"; break;
   default  : cout << "no command\n"; break;    
   }

enum
Перечисляемый тип задается с помощью enum, каждому символическому значению соответствует целое число.

пример enum
enum Color{red, yellow, green};

виды циклов
Выделяют два типа циклов: цикл со счетчиком и циклы с условием (предусловие, постусловие).

main
Программа на языке C++ должна содержать функцию main. С этой функции начинается выполнение программы.
По стандарту языка функция main не имеет аргументов и возвращает занчение типа int:
int main(){
//здесь пишут инструкции языка С++
}

объявить переменную
Возможность объявления переменных без определения допустимо в многофайловых программах для раздельного использования одного программного объекта.
При этом в одном файле проекта переменная должна быть определена, а в другом ее можно использовать без повторного выделения памяти посредством описания в глобальной области с модификатором extern.
Например:
extern int x; //нельзя инициализировать, иначе extern будет проигнорирован и произойдет определение новой переменной

Однострочный комментарий
//Это однострочный комментарий

Многострочный комментарий
/*
Это
многострочный
комментарий
*/

Тернарный условный оператор
:? Это тернарный оператор условия